// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DutyCycleEncoder;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
    import edu.wpi.first.wpilibj2.command.SubsystemBase;
    import frc.robot.Constants;
/**
 *
 */
public class Climb extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private DigitalInput leftHandLimitSwitch;
private DigitalInput leftElbowLimitSwitch;
private DigitalInput leftForearmLimitSwitch;
private DigitalInput rightHandLimitSwitch;
private DigitalInput rightElbowLimitSwitch;
private DigitalInput rightForearmLimitSwitch;
private WPI_TalonFX leftBicep;
private WPI_TalonSRX leftForearm;
private WPI_TalonFX rightBicep;
private WPI_TalonSRX rightForearm;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private double BarX;
private double BarY;
private double BisepActuater;
private double ElbowAngle;
private double ElbowTarget;
private double ShoulderAngle;
private double ShoulderTarget;
private double ForearmActuater;
public boolean shoulderAngleHit;
public boolean elbowAngleHit;
private DutyCycleEncoder leftElbowEncoder;
private DutyCycleEncoder rightElbowEncoder;
    /**
    *
    */
    public Climb() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftHandLimitSwitch = new DigitalInput(2);
 addChild("leftHandLimitSwitch", leftHandLimitSwitch);
 

leftElbowLimitSwitch = new DigitalInput(3);
 addChild("LeftElbowLimitSwitch", leftElbowLimitSwitch);
 

leftForearmLimitSwitch = new DigitalInput(4);
 addChild("LeftForearmLimitSwitch", leftForearmLimitSwitch);
 

rightHandLimitSwitch = new DigitalInput(5);
 addChild("RightHandLimitSwitch", rightHandLimitSwitch);
 

rightElbowLimitSwitch = new DigitalInput(6);
 addChild("RightElbowLimitSwitch", rightElbowLimitSwitch);
 

rightForearmLimitSwitch = new DigitalInput(7);
 addChild("RightForearmLimitSwitch", rightForearmLimitSwitch);
 

leftBicep = new WPI_TalonFX(6);
 
 

leftForearm = new WPI_TalonSRX(7);
 
 

rightBicep = new WPI_TalonFX(8);
 
 

rightForearm = new WPI_TalonSRX(9);
 
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    leftElbowEncoder = new DutyCycleEncoder(0);
    rightElbowEncoder = new DutyCycleEncoder(1);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("leftElbowEncoder", leftElbowEncoder.get());
        SmartDashboard.putBoolean("leftElbowLimitSwitch", leftElbowEncoder.get());
    }

    @Override
    public void simulationPeriodicss() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public boolean isLeftHand() {
        return leftHandLimitSwitch.get();
    }
    public void leftArmMath() {
        ElbowAngle = leftElbowEncoder.get();
        //ShoulderAngle = shoulderPtLeft.get();
        // Calculates the angle that the elbow needs to be at
        ElbowTarget = Math.acos(((Constants.bicepLenght*Constants.bicepLenght)+(Constants.forearmLength*Constants.forearmLength)-(BarY*BarY)-(BarX*BarX))/(2*Constants.forearmLength*Constants.bicepLenght));
        // Calculates the angle that the shoulder needs to be at
        ShoulderTarget = 180-(Math.asin((Math.sin(ElbowTarget)*Constants.forearmLength)/(Math.pow(BarX*BarX*BarY*BarY, .5))))-Math.atan(BarY/BarX);
        // Checks if the Elbow target has been hit
        if (ElbowAngle == ElbowTarget) {
            elbowAngleHit = true;
        }
        else{
            elbowAngleHit = false;
        }
        //Checks if the Shoulder target has been hit
        if (ShoulderAngle == ShoulderTarget) {
            shoulderAngleHit = true;
        }
        else{
            shoulderAngleHit = false;
        }
    }
    public void startLeftElbow(double speed) {
        leftBicep.set(speed);
    }
    public void startLeftShoulder(double speed) {
        leftForearm.set(speed);
    }
    public void stopLeftElbow() {
        leftBicep.stopMotor();
    }
    public void stopLeftShoulder() {
        leftForearm.stopMotor();
    }
    // public void climbtil() {
    //     if (ElbowAngle != ElbowTarget) {
    //         startLeftElbow();
    //     }
    //     else {
    //         stopLeftElbow();
    //     }
    //     if (ShoulderAngle != ShoulderTarget) {
    //         startLeftShoulder();
    //     }
    //     else {
    //         stopLeftShoulder();
    //     }
    // }

}

